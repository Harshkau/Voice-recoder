<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Recorder</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: #fff;
            margin: 0;
        }
        .recorder {
            text-align: center;
            background: rgba(0, 0, 0, 0.6);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 400px;
        }
        button {
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            border: none;
            border-radius: 30px;
            background: #007bff;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
            outline: none;
        }
        button:disabled {
            background-color: #555;
            cursor: not-allowed;
        }
        button:hover:not(:disabled) {
            background-color: #0056b3;
            transform: scale(1.1);
        }
        .recordingsList {
            margin-top: 20px;
            text-align: left;
        }
        .recordingsList h2 {
            font-size: 24px;
            margin-bottom: 10px;
            border-bottom: 2px solid #fff;
            padding-bottom: 5px;
        }
        .recordingsList ul {
            list-style: none;
            padding: 0;
            max-height: 200px;
            overflow-y: auto;
        }
        .recordingsList li {
            margin-bottom: 10px;
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        audio {
            width: 100%;
            max-width: 250px;
            margin-top: 10px;
            border-radius: 10px;
            overflow: hidden;
        }
        .downloadButton {
            background: #28a745;
            color: #fff;
            padding: 5px 10px;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
            outline: none;
        }
        .downloadButton:hover {
            background-color: #218838;
        }
        @media (max-width: 768px) {
            .recorder {
                width: 95%;
                padding: 20px;
            }
            button {
                width: 100%;
                margin: 5px 0;
                font-size: 14px;
                padding: 10px;
            }
        }
        @media (max-width: 480px) {
            .recorder {
                width: 100%;
                padding: 15px;
            }
            button {
                width: 100%;
                margin: 5px 0;
                font-size: 12px;
                padding: 8px;
            }
            .recordingsList h2 {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="recorder">
        <button id="recordButton">Start Recording</button>
        <button id="stopButton" disabled>Stop Recording</button>
        <div class="recordingsList">
            <h2>Recordings:</h2>
            <ul id="recordings"></ul>
        </div>
    </div>

    <script>
        let recordButton = document.getElementById('recordButton');
        let stopButton = document.getElementById('stopButton');
        let recordingsList = document.getElementById('recordings');

        let mediaRecorder;
        let audioChunks = [];

        recordButton.addEventListener('click', async () => {
            let stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);

            mediaRecorder.ondataavailable = event => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                let audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                let audioUrl = URL.createObjectURL(audioBlob);

                let listItem = document.createElement('li');
                let audioElement = document.createElement('audio');
                audioElement.controls = true;
                audioElement.src = audioUrl;

                let downloadLink = document.createElement('a');
                downloadLink.href = audioUrl;
                downloadLink.download = `recording_${new Date().toLocaleDateString()}_${new Date().toLocaleTimeString()}.wav`;
                downloadLink.innerHTML = 'Download';
                downloadLink.className = 'downloadButton';

                listItem.appendChild(audioElement);
                listItem.appendChild(downloadLink);
                recordingsList.appendChild(listItem);

                audioChunks = [];
            };

            mediaRecorder.start();
            recordButton.disabled = true;
            stopButton.disabled = false;
        });

        stopButton.addEventListener('click', () => {
            mediaRecorder.stop();
            recordButton.disabled = false;
            stopButton.disabled = true;
        });
    </script>
</body>
</html>
